/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
// #include <dt-bindings/zmk/mouse.h>

#define DEFAULT 0
#define ALT 1
#define NAV 2
#define NUMB 3
#define SYMB 4
#define GAME 5
// #define MEDIA 6
// #define MOUSE 6

&sk {
  release-after-ms = <500>;
  quick-release;
};

&sl {
  release-after-ms = <500>;
};

// &mmv {
//     time-to-max-speed-ms = <1000>;
//     acceleration-exponent=<1>;
// };

// &mwh {
//     time-to-max-speed-ms = <1000>;
//     acceleration-exponent=<1>;
// };

/ { 
  // Maybe put these in combos if no encoders
  // &kp C_BRI_UP  &kp C_BRI_DN  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP 
  // &sys_reset   
  // combos {
  //     compatible = "zmk,combos";
  //     combo_esc {
  //         timeout-ms = <50>;
  //         key-positions = <33 34>;
  //         bindings = <&kp ENTER>;
  //     };
  //     combo_tab {
  //         timeout-ms = <50>;
  //         key-positions = <31 32>;
  //         bindings = <&kp ESC>;
  //     };
  // };
  behaviors {
    ml: mod_layer {
      compatible = "zmk,behavior-hold-tap";
      label = "MOD_LAYER";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <150>;
      bindings = <&mo>, <&sk>;
    };
    dotbang: dot_bang {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp BANG>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    cmmaqu: comma_question {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp CMMA>, <&kp QMARK>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    slshdash: slash_dash {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&kp MINUS>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    // dotcol: dot_colon {
    //   compatible = "zmk,behavior-mod-morph";
    //   #binding-cells = <0>;
    //   bindings = <&kp DOT>, <&kp COLON>;
    //   mods = <(MOD_LSFT|MOD_RSFT)>;
    // };
    // cmmasemi: comma_semicolon {
    //   compatible = "zmk,behavior-mod-morph";
    //   #binding-cells = <0>;
    //   bindings = <&kp CMMA>, <&kp SEMI>;
    //   mods = <(MOD_LSFT|MOD_RSFT)>;
    // };
    // qubang: question_bang {
    //   compatible = "zmk,behavior-mod-morph";
    //   #binding-cells = <0>;
    //   bindings = <&kp QMARK>, <&kp BANG>;
    //   mods = <(MOD_LSFT|MOD_RSFT)>;
    // };
    // hlt: hold_layer_tap {
    //   compatible = "zmk,behavior-hold-tap";
    //   label = "HOLD_LAYER_TAP";
    //   #binding-cells = <2>;
    //   flavor = "balanced";
    //   tapping-term-ms = <150>;
    //   bindings = <&mo>, <&kp>;
    // };
    // mouse_l: mouse_left {
    //   compatible = "zmk,behavior-mod-morph";
    //   label = "MOUSE_LEFT";
    //   #binding-cells = <0>;
    //   bindings = <&mmv MOVE_HOR(-5000)>, <&mmv MOVE_HOR(-2000)>;
    //   mods = <(MOD_LSFT|MOD_RSFT)>;
    // };
    // mouse_r: mouse_right {
    //   compatible = "zmk,behavior-mod-morph";
    //   label = "MOUSE_RIGHT";
    //   #binding-cells = <0>;
    //   bindings = <&mmv MOVE_HOR(5000)>, <&mmv MOVE_HOR(2000)>;
    //   mods = <(MOD_LSFT|MOD_RSFT)>;
    // };
    // mouse_u: mouse_up {
    //   compatible = "zmk,behavior-mod-morph";
    //   label = "MOUSE_UP";
    //   #binding-cells = <0>;
    //   bindings = <&mmv MOVE_VERT(-5000)>, <&mmv MOVE_VERT(-2000)>;
    //   mods = <(MOD_LSFT|MOD_RSFT)>;
    // };
    // mouse_d: mouse_down {
    //   compatible = "zmk,behavior-mod-morph";
    //   label = "MOUSE_DOWN";
    //   #binding-cells = <0>;
    //   bindings = <&mmv MOVE_VERT(5000)>, <&mmv MOVE_VERT(2000)>;
    //   mods = <(MOD_LSFT|MOD_RSFT)>;
    // };
  };

  keymap {
    compatible = "zmk,keymap";
    default_layer {
      bindings = <
        &kp Q        &kp W        &kp E        &kp R        &kp T           &kp Y       &kp U        &kp I        &kp O        &kp QUOT 
        &kp A        &kp S        &kp D        &kp F        &kp G           &kp H       &kp J        &kp K        &kp L        &kp P   
        &kp Z        &kp X        &kp C        &kp V        &kp B           &kp N       &kp M        &cmmaqu      &dotbang     &slshdash
                              &trans  &ml NAV LSFT  &ml NUMB LGUI           &mo SYMB  &kp SPACE  &trans
      >;
      sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp DOWN UP>;
    };

    alt_layer { // northstar layout
      bindings = <
        &kp Q  &kp W  &kp M  &kp B  &kp Z              &kp J  &kp F  &kp O  &kp U  &kp QUOT
        &kp N  &kp R  &kp S  &kp T  &kp G              &kp Y  &kp H  &kp E  &kp I  &kp A
        &kp X  &kp L  &kp C  &kp D  &kp V              &kp K  &kp P  &cmmaqu  &dotbang  &slshdash
            &trans  &ml NAV LSFT  &ml NUMB LGUI        &mo SYMB  &kp SPACE  &trans

      >;
      sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp DOWN UP>;
    };

    nav_layer {
      bindings = <
        &tog GAME  &sk RALT  &key_repeat  &caps_word  &sk GLOBE             &kp PG_UP     &kp LG(LBKT)    &kp UP          &kp LG(RBKT)    &tog ALT 
        &sk LCTL  &sk LALT  &sk LGUI      &sk LSFT    &sk LC(LS(LALT))      &kp PG_DN     &kp LEFT        &kp DOWN        &kp RIGHT       &kp ENTER
        &kp ESC   &kp TAB   &kp ENTER     &kp SPC     &kp BKSP              &kp LC(MINUS) &kp C_PREV      &kp C_PP        &kp C_NEXT      &kp DEL 
                                        &trans  &trans  &bootloader         &sk LC(LS(LG(LALT)))  &kp BKSP  &trans
      >;
      sensor-bindings = <&inc_dec_kp DOWN UP &inc_dec_kp LS(LG(Z)) LG(Z)>;
    };
  
    number_layer {
      bindings = <
        &bt BT_CLR  &bt BT_PRV  &bt BT_SEL 0  &bt BT_NXT  &kp STAR          &kp MINUS  &kp N1  &kp N2  &kp N3  &kp CMMA
        &kp LCTL    &kp LALT    &kp LGUI      &kp LSFT    &kp PLUS          &kp COLON  &kp N4  &kp N5  &kp N6  &kp ENTER 
        &sys_reset  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &kp FSLH        &kp EQUAL  &kp N7  &kp N8  &kp N9  &kp DOT   
                                          &trans  &kp SPC  &trans           &kp N0  &kp BKSP  &trans
      >;
      sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN &inc_dec_kp PG_DN PG_UP>;
    };
      
    symbols_layer { 
      // doubles ! ? ; : ' "
      bindings = <  
        &kp PRCT  &kp DLLR  &kp HASH    &kp ATSN  &kp STAR        &kp CRRT    &kp QUOT   &kp GRAV    &kp DQT   &kp TILDE
        &kp PIPE  &kp AMPS  &kp QMARK   &kp BANG  &kp PLUS        &kp COLON   &kp MINUS  &kp UNDER   &kp EQUAL   &kp SEMI
        &kp LT    &kp LBKT  &kp LPAR    &kp LBRC  &kp BSLH        &kp FSLH    &kp RBRC  &kp RPAR    &kp RBKT    &kp GT
                                &trans  &kp LSFT  &kp LGUI        &trans  &kp ENTER  &trans
      >;
      sensor-bindings = <&inc_dec_kp TAB LS(TAB) &inc_dec_kp C_VOL_UP C_VOL_DN>;
    };	

    game_layer {
      bindings = <
        &kp ESC  &kp Q  &kp W  &kp E  &kp R             &kp T  &kp N1  &kp UP  &kp N2  &kp BKSP 
        &kp TAB  &kp A  &kp S  &kp D  &kp F             &kp G  &kp LEFT  &kp DOWN  &kp RIGHT  &kp ENTER
        &kp LSFT  &kp Z  &kp X  &kp C  &kp V            &kp B  &kp N3  &kp N4  &kp N5  &kp N6
                    &trans  &kp SPC  &kp LCTL           &tog GAME  &kp SPC &trans
        >;
    };

    // media_layer {
    //   bindings = <
    //     &kp F1  &kp F2    &kp F3    &kp F4    &bt BT_CLR            &kp C_BRI_UP  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &tog GAME
    //     &kp F5  &kp F6    &kp F7    &kp F8    &bt BT_PRV            &kp C_BRI_DN  &kp LSFT      &kp LGUI    &kp LALT      &kp LCTL 
    //     &kp F9  &kp F10   &kp F11   &kp F12   &bootloader           &sys_reset    &kp C_PREV    &kp C_PP    &kp C_NEXT    &tog ALT   
    //                     &trans  &bt BT_SEL 0 &bt BT_NXT             &kp ENTER  &trans  &trans
    //   >;
    //   sensor-bindings = <&inc_dec_kp C_BRI_UP C_BRI_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
    // };

    // mouse_layer {
    //   bindings = <
    //     &tog  MOUSE  &kp RALT  &kp LC(LEFT)  &kp LC(RIGHT)  &kp LC(UP)        &kp PG_UP  &mwh SCROLL_VERT(-40)  &mouse_u  &mkp MCLK  &mkp MB5 
    //     &kp LCTL  &kp LALT  &kp LGUI  &kp LSFT  &kp SPC                       &kp PG_DN  &mouse_l  &mouse_d  &mouse_r  &tog MOUSE
    //     &kp ESC  &kp LC(DOWN)  &kp LG(C)  &kp LG(V)  &kp BKSP                 &kp LC(UP)  &mwh SCROLL_VERT(40)  &mwh SCROLL_HOR(40)  &mwh SCROLL_HOR(-40)  &mkp MB4 
    //                                 &trans  &trans                            &mkp RCLK  &mkp LCLK
    //   >;
    // };

    // alt_layer { // engram layout
    //   bindings = <
    //     &kp B  &kp Y  &kp O  &kp U  &kp Z              &kp QUOT  &kp L  &kp D  &kp W  &kp V 
    //     &kp C  &kp I  &kp E  &kp A  &kp CMMA           &kp DOT  &kp H  &kp T  &kp S  &kp N
    //     &kp G  &kp X  &kp J  &kp K  &kp FSLH           &kp Q  &kp R  &kp M  &kp F  &kp P
    //         &trans  &ml NAV LSFT  &ml NUMB LGUI        &mo SYMB  &kp SPACE  &trans

    //   >;
    //   sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp DOWN UP>;
    // };

    // alt_layer { // graphite layout
    //   bindings = <
    //     &kp B  &kp L  &kp D  &kp W  &kp Z              &kp QUOT  &kp F  &kp O  &kp U  &kp J 
    //     &kp N  &kp R  &kp T  &kp S  &kp G              &kp Y  &kp H  &kp A  &kp E  &kp I
    //     &kp Q  &kp X  &kp M  &kp C  &kp V              &kp K  &kp P  &dotbang  &cmmaqu  &kp SEMI
    //         &trans  &ml NAV LSFT  &ml NUMB LGUI        &mo SYMB  &kp SPACE  &trans

    //   >;
    //   sensor-bindings = <&inc_dec_kp RIGHT LEFT &inc_dec_kp DOWN UP>;
    // };
  };
};
